Git은 Subversion이나 Perforce 같은 다른 VCS와 사용자 interface는 매우 비슷하지만,
정보를 취급하는 방식이 다르다.

Subversion과 같은 VCS와 Git의 가장 큰 차이점은 데이터를 다루는 방법에 있다.
VCS 시스템 대부분은 관리하는 정보가 파일들의 목록이다. CVS, Subversion, Perforce,
Bazaar 등의 시스템은 각 파일의 변화를 시간순으로 관리하면서 파일들의 집합을 관리한다.

Git은 데이터를 파일 시스템 snapshot의 연속으로 취급하고 크기가 아주 작다.
Git은 커밋하거나 프로젝트의 상태를 저장할 때마다 파일이 존재하는 그 순간을 중요하게 여긴다.
파일이 달라지지 않았으면 Git은 성능을 위해서 파일을 새로 저장하지 않고 이전 상태의
파일에 대한 링크만 저장한다. Git은 데이터를 스냅샷의 스트림처럼 취급한다.

Checkins Over Time
Version1  Version2  Version3
File A   -   A1   -    A1
File B   -   B    -    B1
File C   -   C1   -    C2
(시간순으로 프로젝트의 스냅샷을 저장)

- Nearly Every Operation Is Local
Git의 대부분의 명령은 로컬 파일과 데이터만 사용하기 때문에 네트워크에 있는 다른 컴퓨터는
필요 없다. 대부분의 명령어가 네트워크의 속도에 영향을 받는 CVCS에 비해 속도가 매우 빠르다.
프로젝트의 모든 히스토리가 로컬 디스크에 있기 때문에 모든 명령이 순식간에 실행된다.
또한 오프라인 상태이거나 VPN에 연결하지 못해도 커밋할 수 있다. (Local Storage) 

- Git Has Integrity
Git은 데이터를 저장하기 전에 항상 체크섬(checksum)을 구하고 그 체크섬으로 데이터를 관리한다.
체크섬은 Git에서 사용하는 가장 기본적인 데이터 단위이자 Git의 기본 철학이다. Git 없이는 체크섬을 
다룰 수 없어서 파일의 상태도 알 수 없고 데이터를 파괴할 수도 없다.

Git은 SHA-1 해시를 사용하여 체크섬을 만든다. 만든 체크섬은 40자 길이의 16진수 문자열이다.
파일의 내용이나 디렉토리 구조를 이용하여 체크섬을 구한다. SHA-1은 아래처럼 생겼다.
24b9da6552252987aa493b52f8696cd6d3b00373
Git은 모든 것을 해시로 식별하기 때문에 이런 값은 자주 보인다. 실제로 Git은 파일을 이름으로
저장하지 않고 해당 파일의 해시로 저장한다.

- Git Generally Only Adds Data
Git으로 어떤 작업을 하든 Git 데이터베이스에 데이터가 추가된다. 되돌리거나 데이터를 삭제할 방법이 없다.
다른 VCS처럼 Git도 커밋하지 않으면 변경사항을 잃어버릴 수 있지만, 스냅샷을 커밋하고 나면 데이터를 
잃어버리기 어렵다.


세 가지 상태
Git은 파일을 Modified, Staged, Committed 이렇게 세 가지 상태로 관리한다.
- Modified는 수정한 파일을 아직 로컬 데이터베이스에 커밋하지 않은 것을 말한다.
- Staged란 현재 수정한 파일을 곧 커밋할 것이라고 표시한 상태를 의미한다.
- Committed란 데이터가 로컬 데이터베이스에 안전하게 저장됐다는 것을 의미한다.

이 세가지 상태는 Git 프로젝트의 세 가지 단계와 연결되어 있다. the working tree, the staging area
and the Git directory.
- 워킹 트리는 프로젝트의 특정 버전을 Checkout(사용) 한 것이다. Git 디렉토리는 지금 작업하는 디스크에 있고,
그 디렉토리 안에 압축된 데이터베이스에서 파일을 가져와서 워킹 트리를 만든다.

- Staging Area는 Git 디렉토리에 있다. 단순한 파일이고 곧 커밋할 파일에 대한 정보를 저장한다.
Git에서 기술용어로는 "Index"라고 하지만 "Staging Area"라는 용어도 상요한다.

- Git 디렉토리는 Git이 프로젝트의 메타데이터와 객체 데이터베이스를 저장하는 곳을 말한다.
이 Git 디렉토리가 Git의 핵심이다. 다른 컴퓨터에 있는 repository를 clone 할 때 Git 디렉토리가 만들어진다.


Git이 하는 일은 기본적으로 아래와 같다.
  1. 워킹 트리에서 파일을 수정한다.
  2. Staging Area에 파일을 Stage 해서 커밋할 스냅샷을 만든다. 모든 파일을 추가할 수도 있고 
  선택하여 추가할 수도 있다.
  3. Staging Area에 있는 파일들을 Commit 해서 Git 디렉토리에 영구적인 스냅샷으로 저장한다.

Git 디렉토리에 있는 파일들은 Committed 상태이다. 파일을 수정하고 Staging Area에 추가했다면 Staged 상태이다.
그리고 Checkout 하고 나서 수정했지만, 아직 Staging Area에 추가하지 않았으면 Modified 상태이다.
