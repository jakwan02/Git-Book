버전 관리 시스템은 파일 변화를 시간에 따라 기록했다가 나중에 특정 시점의 버전을 다시 꺼내올 수 있는
시스템이다. 

그래픽 디자이너나 웹 디자이너도 버전 관리 시스템(VCS - Version Control System)을 사용할 수 있다.
VCS를 사용하면 각 파일을 이전 상태로 되돌릴 수 있고, 프로젝트를 통째로 이전 상태로 되돌릴 수 있고,
시간에 따라 수정 내용을 비교해 볼 수 있고, 누가 문제를 일으켰는지도 추적할 수 있고, 누가 언제 만들어낸
이슈인지도 알 수 있다. 또한 파일을 잃어버리거나 잘못 고쳤을 때도 쉽게 복구할 수 있다. 이런 모든 장점을
큰 노력 없이 이용할 수 있다.


로컬 버전 관리(Local VCS)
Local VCS는 아주 간단한 데이터베이스를 사용해서 파일의 변경 정보를 관리한다.
VCS 도구 중에 RCS(Revision Control System)라고 부르는 것이 있는데 RCS는 기본적으로 
Patch Set(파일에서 변경되는 부분)을 관리한다. 그리고 일련의 Patch Set을 적용해서 모든 파일을 특정 시점으로
되돌릴 수 있다.


중앙집중식 버전 관리(Central VCS)
프로젝트를 진행하다 보면 다른 개발자와 함께 작업해야 하는 경우가 많다. 이럴 때 생기는 문제를 해결하기 위해
CVCS가 개발됐다. 파일을 관리하는 서버가 별도로 있고 클라이언트가 중앙 서버에서 파일을 받아서
사용(Checkout)한다. 
CVCS는 Local VCS에 비해 장점이 많다. 모두 누가 무엇을 하고 있는지 알 수 있다. 모든 클라이언트의 로컬
데이터베이스를 관리하는 것보다 VCS 하나를 관리하기가 훨씬 쉽다.

그러나 CVCS 환경은 몇 가지 치명적인 결점이 있다. 가장 대표적인 것이 중앙 서버에 발생한 문제다.
서버가 다운되면 그동안 협업할 수 없고 백업할 방법도 없다. 그리고 중앙 데이터베이스가 있는 하드디스크에 문제가
생기면 프로젝트의 모든 히스토리를 잃는다. 물론 사람마다 하나씩 가진 스냅샷은 괜찮다. 로컬 VCS 시스템도 이와
비슷한 결점이 있고 이런 문제가 발생하면 모든 것을 잃는다.


분산 버전 관리 시스템(Dispersion VCS)
Git, Mecurial, Bazaar 같은 DVCS에서의 클라이언트는 단순히 파일의 마지막 스냅샷을 Checkout하지 않는다.
저장소를 히스토리와 더불어 전부 복제한다. 서버에 문제가 생기면 이 복제물로 다시 작업을 시작할 수 있다.
클라이언트 중에서 아무거나 골라도 서버를 복원할 수 있다. Clone은 모든 데이터를 가진 진정한 백업이다.

대부분의 DVCS 환경에서는 리모트 저장소가 존재한다. 리모트 저장소가 많을 수도 있다. 그래서 사람들은 동시에
다양한 그룹과 다양한 방법으로 협업할 수 있다. 계층 모델 같은 중앙집중식 시스템으로는 할 수 없는 워크플로를
다양하게 사용할 수 있다.